import os
import json
import uuid
import time
from datetime import datetime, timezone
import argparse
from kafka import KafkaProducer
from kafka.errors import KafkaError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
KAFKA_BROKER = os.environ.get('KAFKA_BOOTSTRAP_SERVERS', 'localhost:29092')
KAFKA_TOPIC = os.environ.get('KAFKA_TOPIC', 'warehouse-movements')

# --- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å API
TEST_WAREHOUSE_ID = "c1d70455-7e14-11e9-812a-70106f431230"
TEST_PRODUCT_ID = "4705204f-498f-4f96-b4ba-df17fb56bf55"

def create_message(event_type: str, quantity: int, movement_id: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Kafka."""
    if not movement_id:
        movement_id = str(uuid.uuid4())

    source_wh = "WH-3322" if event_type == "departure" else "WH-3423"
    subject = f"{source_wh}:{event_type.upper()}"

    message = {
        "id": str(uuid.uuid4()),
        "source": source_wh,
        "specversion": "1.0",
        "type": "ru.retail.warehouses.movement",
        "datacontenttype": "application/json",
        "dataschema": "ru.retail.warehouses.movement.v1.0",
        "time": int(time.time() * 1000),
        "subject": subject,
        "destination": "ru.retail.warehouses",
        "data": {
            "movement_id": movement_id,
            "warehouse_id": TEST_WAREHOUSE_ID,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "event": event_type,
            "product_id": TEST_PRODUCT_ID,
            "quantity": quantity
        }
    }
    return message

def send_message(producer, topic, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    try:
        future = producer.send(topic, value=json.dumps(message).encode('utf-8'))
        record_metadata = future.get(timeout=10)
        
        print("\n--- ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ---")
        print(f"–¢–æ–ø–∏–∫: {record_metadata.topic}, –ü–∞—Ä—Ç–∏—Ü–∏—è: {record_metadata.partition}, Offset: {record_metadata.offset}")
        
        data = message['data']
        movement_id = data['movement_id']
        warehouse_id = data['warehouse_id']
        product_id = data['product_id']
        
        print("\n--- üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API ---")
        print(f"Movement ID: {movement_id}")
        print(f"Warehouse ID: {warehouse_id}")
        print(f"Product ID: {product_id}")
        
        print("\n--- üìã –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è curl ---")
        print("# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞:")
        print(f"curl http://localhost:8000/api/warehouses/{warehouse_id}/products/{product_id} | jq")
        print("\n# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:")
        print(f"curl http://localhost:8000/api/movements/{movement_id} | jq")
        print("-------------------------------------\n")

    except KafkaError as e:
        print(f"--- ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} ---")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka.")
    parser.add_argument('event', type=str, choices=['arrival', 'departure'], help="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: 'arrival' –∏–ª–∏ 'departure'")
    parser.add_argument('quantity', type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
    parser.add_argument('--movement_id', type=str, default=None, help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π movement_id –¥–ª—è —Å–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π")

    args = parser.parse_args()

    kafka_producer = KafkaProducer(bootstrap_servers=KAFKA_BROKER)
    msg = create_message(args.event, args.quantity, args.movement_id)
    send_message(kafka_producer, KAFKA_TOPIC, msg)
    kafka_producer.flush()
    kafka_producer.close()